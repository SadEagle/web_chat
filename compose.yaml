services:
  traefik:
    image: traefik:v3.5
    restart: unless-stopped
    networks:
      - proxy
    environment:
      # PROD/DEV/TEST
      - RUN_MODE=prod
    ports:
      - "80:80"
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"
      - "--entrypoints.web.address=:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  db:
    image: postgres:18beta2-alpine3.22
    restart: always
    shm_size: 128mb
    env_file:
      - ./env/.env_db
    volumes:
      - postgre_volume:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  frontend:
    image: web-chat-frontend:latest
    restart: unless-stopped
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=!PathPrefix(`/api`)"
      - "traefik.http.routers.frontend.entrypoints=web"
    depends_on:
      - backend

  backend:
    image: web-chat-backend:latest
    restart: unless-stopped
    env_file:
      - ./env/.env_db
    networks:
      - proxy
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
    depends_on:
      db:
        condition: service_healthy

networks:
  proxy:
    name: proxy
  backend:
    driver: bridge

volumes:
  postgre_volume:
