services:
  traefik:
    image: docker.io/library/traefik:3.5
    restart: always
    networks:
      - proxy
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"
      - "--entryPoints.web.address=:80"
    ports:
      - "8000:80"
      - "8080:8080"
    volumes:
      - /run/user/1004/podman/podman.sock:/var/run/docker.sock:ro
      # - /run/podman/podman.sock:/var/run/docker.sock:ro

      # db:
      #   image: docker.io/library/postgres:18beta2-alpine3.22
      #   restart: always
      #   shm_size: 128mb
      #   env_file:
      #     - ./env/.env_db
      #   volumes:
      #     - postgre_volume:/var/lib/postgresql/data
      #   networks:
      #     - backend
      #   healthcheck:
      #     test: [ "CMD", "pg_isready" ]
      #     interval: 1m30s
      #     timeout: 30s
      #     retries: 5
      #     start_period: 30s

  frontend:
    build: ./frontend
    image: web-chat-frontend:latest
    restart: unless-stopped
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.frontend.entrypoints=web"
    depends_on:
      - backend

  backend:
    build: ./backend
    image: web-chat-backend:latest
    restart: unless-stopped
    environment:
      # prod/dev/test
      - RUN_MODE=dev
    networks:
      - proxy
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
    # depends_on:
    #   db:
    #     condition: service_healthy

networks:
  proxy:
    name: proxy
  backend:
    driver: bridge

volumes:
  postgre_volume:
